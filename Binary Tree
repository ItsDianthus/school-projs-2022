class Node:
    def __init__(self, value, r_child = None, l_child = None):
        self.value = value
        self.r_child = r_child
        self.l_child = l_child

class BST:
    def __init__(self):
        self.root = None
        
    def insert(self, value):
        if self.root == None:
            self.root = Node(value)
        else:
            self._insert(value, self.root)
            
    def _insert(self, value, cur_node):
        if value > cur_node.value:
            if cur_node.r_child is None:
                cur_node.r_child = Node(value)
            else:
                self._insert(value, cur_node.r_child)
        elif value < cur_node.value:
            if cur_node.l_child is None:
                cur_node.l_child = Node(value)
            else:
                self._insert(value, cur_node.l_child)

    def InOrder(self):
        if self.root == None:
            print('You r liar')
        else:
            self._InOrder(self.root)
            
    def _InOrder(self, cur_node):
        if cur_node is None:
            pass
            #print('cur_node is none')
        else:
            self._InOrder(cur_node.l_child)
            print(cur_node.value)
            self._InOrder(cur_node.r_child)

    def PreOrder(self):
        if self.root == None:
            print('You r liar')
        else:
            self._PreOrder(self.root)
            
    def _PreOrder(self, cur_node):
        if cur_node is None:
            pass
            #print('cur_node is none')
        else:
            print(cur_node.value)
            self._PreOrder(cur_node.l_child)
            self._PreOrder(cur_node.r_child)

    def PostOrder(self):
        if self.root == None:
            print('You r liar')
        else:
            self._PostOrder(self.root)
            
    def _PostOrder(self, cur_node):
        if cur_node is None:
            pass
            #print('cur_node is none')
        else:
            self._PostOrder(cur_node.l_child)
            self._PostOrder(cur_node.r_child)
            print(cur_node.value)
        
                
tree = BST()
tree.insert(10)
tree.insert(3)
tree.insert(6)
tree.insert(1)
tree.insert(9)
tree.insert(4)
tree.insert(8)
tree.InOrder()
tree.PreOrder()
tree.PostOrder()
