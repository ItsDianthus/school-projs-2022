class Node:
    def __init__(self, value, parent = None, r_child = None, l_child = None, height = 0):
        self.value = value
        self.parent = parent
        self.r_child = r_child
        self.l_child = l_child
        self.height = height

    def hasRightChild(self):
        if self.r_child is None:
            return False
        else:
            return True

    def hasLeftChild(self):
        if self.l_child is None:
            return False
        else:
            return True
        
    def hasBothChild(self):
        if self.hasRightChild() and self.hasLeftChild():
            return True
        else:
            return False
        
    def isParent(self):
        if self.hasRightChild() or self.hasLeftChild():
            return True
        else:
            return False
        
    def isRoot(self):
        if self.parent == None:
            return True
        else:
            return False
        
    def isLeftChild(self):
        if self.parent.l_child == self:
            return True
        else:
            return False
        
    def isRightChild(self):
        if self.parent.r_child == self:
            return True
        else:
            return False
        
        


class BST:
    def __init__(self):
        self.root = None


    def width(self):
        if self.root == None:
            print('No root, width = 0')
        elif self.root.hasBothChild() == False:
            return 1
        else:
            return self._width(self.root)

    def _width(self, cur_node):
        if cur_node != None:
            return 1 + self._width(cur_node.l_child) + self._width(cur_node.r_child)
        else:
            return 0

    def depth(self):
        if self.root == None:
            print('No root, depth = 0')
        elif self.root.hasBothChild() == False:
            return 1
        else:
            return self._depth(self.root)

    def _depth(self, cur_node):
        if cur_node != None:
            return 1 + max(self._depth(cur_node.l_child), self._depth(cur_node.r_child))
        else:
            return 0

    def height(self, value):
        if self.root == None:
            print('no height srry')
        elif self.search(value):
            return self._height(value, self.root)
        
    def _height(self, value, cur_node):
        if value == cur_node.value:
            return self._depth(cur_node)
        elif value > cur_node.value:
            return self._height(value, cur_node.r_child)
        elif value < cur_node.value:
            return self._height(value, cur_node.l_child)

        
    def balance_factor(self, value):
        if self.root == None:
            print('no root srry')
        elif self.search(value):
            return self._balance_factor(value, self.root)
        
    def _balance_factor(self, value, cur_node):
        if value == cur_node.value:
            if cur_node.hasRightChild() and cur_node.hasLeftChild():
                return self._depth(cur_node.r_child) - self._depth(cur_node.l_child)
            elif cur_node.hasRightChild():
                return self._depth(cur_node.r_child)
            elif cur_node.hasLeftChild():
                return self._depth(cur_node.l_child)
            else:
                print('0 - 0 = 0, maan')
        elif value > cur_node.value:
            return self._height(value, cur_node.r_child)
        elif value < cur_node.value:
            return self._height(value, cur_node.l_child)
        
        
    def insert(self, value):
        if self.root == None:
            self.root = Node(value)
            self.root.height = 0
        else:
            self._insert(value, self.root)
            
    def _insert(self, value, cur_node):
        if value > cur_node.value:
            if cur_node.r_child is None:
                cur_node.r_child = Node(value)
                cur_node.r_child.parent = cur_node
                #while has parents, height +1
                if not cur_node.hasBothChild():
                    self.height_changer(cur_node.r_child)
                # test if balance_fact failed
            else:
                self._insert(value, cur_node.r_child)
        elif value < cur_node.value:
            if cur_node.l_child is None:
                cur_node.l_child = Node(value)
                cur_node.l_child.parent = cur_node
                if not cur_node.hasBothChild():
                    self.height_changer(cur_node.l_child)
            else:
                self._insert(value, cur_node.l_child)
                
    def height_changer(self, cur_node):
        if cur_node.parent:
            cur_node.parent.height += 1
            #NOT ONE, What if it already has child
            self.height_changer(cur_node.parent)

    def search(self, value):
        if self.root.value == value:
            return True
        else:
            return self._search(value, self.root)

    def _search(self, value, cur_node):
        if value == cur_node.value:
            return True
        elif value > cur_node.value:
            if cur_node.r_child is None:
                return False
            else:
                return self._search(value, cur_node.r_child)
        elif value < cur_node.value:
            if cur_node.l_child is None:
                return False
            else:
                return self._search(value, cur_node.l_child)


    def delete(self, value):
        if self.root.value == value:
            return('You can"t delete the root!')
        elif self.search(value) is False:
            return('There is no Node with this value')
        else:
            return self._delete(value, self.root)


    def _delete(self, value, cur_node):
        if value == cur_node.value:
            if cur_node.hasLeftChild():
                theRight = self._rightest(cur_node.l_child)
                cur_node.value = theRight.value
                print('cur_node has left')
            elif cur_node.hasRightChild():
                #print('cur_node', cur_node.value)
                #print('cur_node right is', cur_node.r_child.value)
                cur_node.value = cur_node.r_child.value
                if cur_node.r_child.hasLeftChild():
                    cur_node.l_child = cur_node.r_child.l_child
                if cur_node.r_child.hasRightChild():
                    cur_node.r_child = cur_node.r_child.r_child
                cur_node.r_child = None
                print('cur_node has right')
                
            else:
                cur_node.value = None
                print('cur_node has no children and is none')
        elif value > cur_node.value:
            return self._delete(value, cur_node.r_child)
        elif value < cur_node.value:
            return self._delete(value, cur_node.l_child)
    
    def _rightest(self, cur_node):
        if cur_node.hasRightChild() is False:
            return cur_node
        else:
            return self._rightest(cur_node.r_child)


    def InOrder(self):
        if self.root == None:
            print('You r liar')
        else:
            self._InOrder(self.root)
            
    def _InOrder(self, cur_node):
        if cur_node is None:
            pass
            #print('cur_node is none')
        else:
            self._InOrder(cur_node.l_child)
            print(cur_node.value)
            self._InOrder(cur_node.r_child)

    def PreOrder(self):
        if self.root == None:
            print('You r liar')
        else:
            self._PreOrder(self.root)
            
    def _PreOrder(self, cur_node):
        if cur_node is None:
            pass
            #print('cur_node is none')
        else:
            print(cur_node.value)
            self._PreOrder(cur_node.l_child)
            self._PreOrder(cur_node.r_child)

    def PostOrder(self):
        if self.root == None:
            print('You r liar')
        else:
            self._PostOrder(self.root)
            
    def _PostOrder(self, cur_node):
        if cur_node is None:
            pass
            #print('cur_node is none')
        else:
            self._PostOrder(cur_node.l_child)
            self._PostOrder(cur_node.r_child)
            print(cur_node.value)
        
                
tree = BST()
tree.insert(50)
tree.insert(40)
tree.insert(55)
#tree.insert(45)
#tree.insert(47)
#tree.insert(46)
#tree.insert(43)
#tree.insert(9)
#tree.insert(4)
#tree.insert(8)
#tree.InOrder()
#tree.PreOrder()
#tree.PostOrder()
