import matplotlib.pyplot as plt
from random import randint
import copy
import time


def switch(a, b):
    '''Поменять значения переменных'''
    return(b, a)

def bubblesort(data):
    '''Сортировка пузырьком'''
    for diff in range(len(data)):
        for j in range(1, len(data)):
            if data[j-1] > data[j]:
                data[j-1], data[j] = switch(data[j-1], data[j])
    return data

def bubblesort_v2(data):
    '''Сортировка пузырьком v2'''
    for diff in range(len(data)):
        for j in range(1, len(data) - diff):
            if data[j-1] > data[j]:
                data[j-1], data[j] = switch(data[j-1], data[j])
    return data

def bubblesort_v3(data):
    '''Сортировка пузырьком v3'''
    flag = True
    while flag:
        flag = False
        for diff in range(len(data)):
            for j in range(1, len(data) - diff):
                if data[j-1] > data[j]:
                    data[j-1], data[j] = switch(data[j-1], data[j])
                    flag = True
    return data

def shakersort(data):
    '''Шейкерная сортировка'''
    change = True
    diff = 0
    while change: 
        change = False
        for j in range(1, len(data) - diff): 
            if data[j-1] > data[j]:
                data[j-1], data[j] = switch(data[j-1], data[j]) 
                change = True
        diff += 1
        if not change:
            break
        for k in range(len(data) - diff - 1, 0, -1): 
            if data[k-1] > data[k]:
                data[k-1], data[k] = switch(data[k-1], data[k]) 
                change = True 
    return data

def quicksort(nums):
   '''Быстрая сортировка'''
   if len(nums) <= 1:
       return nums
   else:
       q = nums[len(nums)//2]
       s_nums = []
       m_nums = []
       e_nums = []
       for n in nums:
           if n < q:
               s_nums.append(n)
           elif n > q:
               m_nums.append(n)
           else:
               e_nums.append(n)
       return quicksort(s_nums) + e_nums + quicksort(m_nums)

def oddevensort(data):
    '''Чётно-нечётная сортировка'''
    n = len(data)
    flag = False
    while not flag:
        flag = True
        for i in range(0, len(data)-1, 2):
            if data[i] > data[i+1]:
                data[i], data[i+1] = switch(data[i], data[i+1])
                flag = False              
        for i in range(1, len(data)-1, 2):
            if data[i] > data[i+1]:
                data[i], data[i+1] = switch(data[i], data[i+1])
                flag = False
    return data

def insertionsort(data):
    '''Сортировка вставками'''
    for i in range(len(data)):
        key = data[i]
        j = i-1
        while data[j] > key and j >= 0:
            data[j+1] = data[j]
            j -= 1
        data[j+1] = key
    return data

def pairwise_insertionsort(data):
    '''Парная сортировка вставками'''
    for i in range(0, len(data)-(len(data)%2), 2):
        j = i-1
        first = data[i]
        second = data[i+1]
        if second > first:
            first, second = switch(first, second)
        while data[j] > first and j >= 0:
            data[j + 2] = data[j]
            j -= 1
        data[j + 2] = first
        while data[j] > second and j >= 0:
            data[j + 1] = data[j]
            j -= 1
            data[j + 1] = second
    if len(data)%2 == 1:
        i = (len(data)-1)
        j = i-1
        key = data[i]
        while data[j] > key and j >= 0:
            data[j + 1] = data[j]
            j -= 1
        data[j + 1] = key
    return data


def mergesort(data):
    '''Сортировка слиянием'''
    if len(data) == 1:
        return data
    fin = []
    left = data[:len(data)//2]
    right = data[len(data)//2:]
    left = mergesort(left)
    right = mergesort(right)
    while left != [] and right != []:
        if left[0] > right[0]:
            fin.append(right[0])
            del right[0]
        else:
            fin.append(left[0])
            del left[0]
    fin += left
    fin += right
    return fin


list_funcs = [bubblesort, bubblesort_v2, bubblesort_v3, shakersort, quicksort, oddevensort, insertionsort, pairwise_insertionsort, mergesort]
titles = []
data_time = []
data_num = []
for funcs in list_funcs:
    titles.append(funcs.__doc__)
    data_time.append([])
    data_num.append([])
    
plt.title('Сложность сортировок')
plt.xlabel('Входные данные (n элементов)')
plt.ylabel('Время выполнения (t, c)')

for nums in range(100, 8000, 100):
    data_all = [randint(-1000, 1000) for _ in range(nums)]
    for el in range(len(list_funcs)):
        data = data_all.copy()
        start_time = time.time() 
        list_funcs[el](data)
        end_time = time.time() 
        data_num[el].append(nums) 
        data_time[el].append(end_time - start_time)
for el in range(len(list_funcs)):
    plt.plot(data_num[el], data_time[el], label=titles[el])
plt.legend()
plt.show()
